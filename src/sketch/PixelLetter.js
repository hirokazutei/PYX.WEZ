export default function PixelLetter(x, y, letter, size) {

// Then I realized what the deal with the capitalization was, and that
// we could just say n.lowerCase() to cut the problem in half!
let alphabet = {
  a: [
    [0,  0,  0,  0,  0,  10, 10, 20, 20, 30,  30,  40, 40,  40,  40,  40],
    [20, 30, 40, 50, 60, 10, 40, 0,  40, 10,  40,  20, 30,  40,  50,  60]
  ],
  b: [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 10,  20,  20, 20,  30,  30,  30,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  30, 60,  0,   30, 60,  0,   30,  60,  10,  20,  40,  50]
  ],
  c:  [
    [0,  0,  0,  0,  0,  10, 10, 20, 20, 30,  30,  40, 40],
    [10, 20, 30, 40, 50, 0,  60, 0,  60, 0,   60,  10, 50]
  ],
  d:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 20,  20,  30, 30,  40,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  60, 0,   60,  0,  60,  10,  20,  30,  40,  50]
  ],
  e:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 10,  20,  20, 20,  30,  30,  30,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  30, 60,  0,   30, 60,  0,   30,  60,  0,   60]
  ],
  f:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 20,  20,  30, 30,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  30, 0,   30,  0,  30,  0]
  ],
  g:  [
    [0,  0,  0,  0,  0,  10, 10, 20, 20, 30,  30,  30, 40,  40,  40],
    [10, 20, 30, 40, 50, 0,  60, 0,  60, 0,   40,  60, 10,  40,  50]
  ],
  h:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 20, 30,  40,  40, 40,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 30, 30, 30,  0,   10, 20,  30,  40,  50,  60]
  ],
  i:  [
    [10, 10, 20, 20, 20, 20, 20, 20, 20, 30,  30],
    [0,  60, 0,  10, 20, 30, 40, 50, 60, 0,   60]
  ],
  j:  [
    [0,  10, 20, 30, 40, 40, 40, 40, 40, 40],
    [50, 60, 60, 60, 0,  10, 20, 30, 40, 50]
  ],
  k:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 20, 20,  30,  30, 40,  40],
    [0,  10, 20, 30, 40, 50, 60, 30, 20, 40,  10,  50, 0,   60]
  ],
  l:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 20, 30,  40],
    [0,  10, 20, 30, 40, 50, 60, 60, 60, 60,  60]
  ],
  m:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 20, 30,  40,  40, 40,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 10, 20, 10,  0,   10, 20,  30,  40,  50,  60]
  ],
  n:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 20,  30,  30, 40,  40,  40,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 10, 20, 30,  40,  50, 0,   10,  20,  30,  40,  50,  60]
  ],
  o:  [
    [0,  0,  0,  0,  0,  10, 10, 20, 20, 30,  30,  40, 40,  40,  40,  40],
    [10, 20, 30, 40, 50, 0,  60, 0,  60, 0,   60,  10, 20,  30,  40,  50]
  ],
  p:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 20,  20,  30, 30,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  30, 0,   30,  0,  30,  10,  20]
  ],
  q:  [
    [0,  0,  0,  0,  0,  10, 10, 20, 20, 20,  30,  30, 40,  40,  40,  40,  40],
    [10, 20, 30, 40, 50, 0,  60, 0,  40, 60,  0,   50, 10,  20,  30,  40,  60]
  ],
  r:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 10, 20,  20,  20, 30,  30,  30,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 0,  30, 0,   30,  40, 0,   30,  50,  10,  20,  60]
  ],
  s:  [
    [0,  0,  0,  10, 10, 10, 20, 20, 20, 30,  30,  30, 40,  40,  40],
    [10, 20, 50, 0,  30, 60, 0,  30, 60, 0,   30,  60, 10,  40,  50]
  ],
  t:  [
    [0,  10, 20, 20, 20, 20, 20, 20, 20, 30,  40],
    [0,  0,  0,  10, 20, 30, 40, 50, 60, 0,   0]
  ],
  u:  [
    [0,  0,  0,  0,  0,  0,  10, 20, 30, 40,  40,  40, 40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 60, 60, 0,   10,  20, 30,  40,  50]
  ],
  v:  [
    [0,  0,  0,  0,  10, 10, 20, 30, 30, 40,  40,  40, 40],
    [0,  10, 20, 30, 40, 50, 60, 50, 40, 30,  20,  10, 0]
  ],
  w:  [
    [0,  0,  0,  0,  0,  0,  0,  10, 20, 30,  40,  40, 40,  40,  40,  40,  40],
    [0,  10, 20, 30, 40, 50, 60, 50, 40, 50,  0,   10, 20,  30,  40,  50,  60]
  ],
  x:  [
    [0,  0,  0,  0,  10, 10, 20, 30, 30, 40,  40,  40, 40],
    [0,  10, 50, 60, 20, 40, 30, 20, 40, 0,   10,  50, 60]
  ],
  y:  [
    [0,  0,  0,  10, 20, 20, 20, 30, 40, 40,  40],
    [0,  10, 20, 30, 40, 50, 60, 30, 20, 10,  0]
  ],
  z:  [
    [0,  0,  0,  10, 10, 10, 20, 20, 20, 30,  30,  30, 40,  40,  40],
    [0,  50, 60, 0,  40, 60, 0,  30, 60, 0,   20,  60, 0,   10,  60]
  ]
}



// TODO: Deal with the edge case
//[
  //[ //"-":26
    //[10, 20, 30],
    //[30, 30, 30]
  //],
  //[ //" ":27
    //[],
    //[]
  //],
  //[ //":":27
    //[10, 10],
    //[20, 40]
  //],
  //[ //".":27
    //[10],
    //[60]
  //],
//]

//rect(
  //       alphabet[letter_number][first_array]
  //this.x + pixelletters[this.n][0][i] / 10 * size,
  //this.y + pixelletters[this.n][1][i] / 10 * size,
  //size,
  //size
//);

    //if (size) {
      //for (var i = 0; i < pixelletters[this.n][0].length; i++) {
        //rect(
          //this.x + pixelletters[this.n][0][i] / 10 * size,
          //this.y + pixelletters[this.n][1][i] / 10 * size,
          //size,
          //size
        //);
      //}
    //} else {

      //_.each(infoMark[0], (letter) => {
      //for (
        //var i = 0;
        //i < pixelletters[n][0].length;
        //i++
      //) {
        //s.rect(
          //x + letters[letter][0],
          //y + letters[letter][1],
          //10,
          //10
        //);
      //}
    //}

}
